{
  "name": "ftp-simple",
  "version": "0.1.22",
  "description": "simple ftp",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ftp",
    "upload",
    "download",
    "remote"
  ],
  "dependencies": {
    "easy-loop": "^1.6.0",
    "fs-extra": "^0.30.0",
    "iconv-lite": "^0.4.13",
    "jsftp": "^2.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/humy2833/ftp-simple_module.git"
  },
  "bugs": {
    "url": "https://github.com/humy2833/ftp-simple_module/issues"
  },
  "author": {
    "name": "humy2833",
    "email": "humy2833@gmail.com"
  },
  "license": "MIT",
  "readme": "ftp-simple\r\n===========\r\n- Only FTP (Not support sftp. sftp use the [easy-ftp](https://www.npmjs.com/package/easy-ftp))\r\n- 간단한 설정만으로 편리하게 FTP 기능을 이용할 수 있습니다.\r\n\r\n\r\nInstall\r\n=======\r\n\r\n    npm install ftp-simple\r\n\r\n\r\n\r\n\r\nUsage\r\n===========\r\n```javascript\r\nvar FTP = require('ftp-simple');\r\nvar config = {\r\n    host: '',\r\n    port: 21,\r\n    username: '', //or user\r\n    password: ''  //or pass\r\n};\r\nvar ftp = new FTP(config);\r\n\r\n\r\n\r\n//폴더 변경(directory change)\r\nftp.cd(\"/\", function(err, path){});\t\r\n\r\n//파일 or 폴더 삭제(하위 파일 및 폴더 포함)(file or directory remove(recursive))\r\nftp.rm(\"/filename\", function(err){});\t\r\n\r\n//폴더 생성(하위 폴더 포함 생성)(make directory)\r\nftp.mkdir(\"/directory\", function(err){});\t\r\n\r\n//파일 or 폴더 이동 혹은 이름 변경(file or directory move or change filename)\r\nftp.mv(\"/filename\", \"/newFilename\", function(err, newPath){});\t\r\n\r\n//폴더 내 파일목록 반환(show files in directory)\r\nftp.ls(\"/directory\", function(err, list){});\t\r\n\r\n//ftp 서버상의 현재 작업 경로 반환(return server path)\r\nftp.pwd(function(err, path){});\t\r\n\r\n//서버에 파일이 존재하는지 여부 반환(boolean)\r\nftp.exist(\"/filename\", function(exist){});\r\n\r\n\r\n//파일 or 폴더 업로드(file or directory upload)\r\nftp.upload(\"/test.txt\", \"/test.txt\", function(err){});  \t//result => /test.txt\r\nftp.upload(\"/test.txt\", \"/test123.txt\", function(err){});  //result => /test123.txt \r\nftp.upload(\"/test.txt\", \"/\", function(err){});\t\t\t//result => /test.txt\r\nftp.upload(\"/directory\", \"/\", function(err){});\t\t\t//result => /directory\r\n\r\n//Array - Object({local:'localPath', remote:'remotePath'})\r\nvar arr = [{local:\"/test.txt\", remote:\"/test.txt\"}, {local:\"/test1.txt\", remote:\"/abcd/test2.txt\"}, {local:\"/directory\", remote:\"/\"}];\r\nftp.upload(arr, function(err){});\t// 2 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - String\r\nvar arr = [\"/test.txt\", \"/abcd/test2.txt\", \"/directory\"];\r\nftp.upload(arr, \"/\", function(err){});\t// 3 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - Object and String\r\nvar arr = [{local:\"/test.txt\", remote:\"/directory/test.txt\"}, \"/abcd/test2.txt\", \"/directory\"];\r\nftp.upload(arr, \"/\", function(err){});\t// 3 arguments;\r\n/* result\r\n/directory/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n\r\n//파일 or 폴더 다운로드(file or directory download)\r\nftp.download(\"/test.txt\", \"/test.txt\", function(err){});\t//result => /test.txt\r\nftp.download(\"/test.txt\", \"/test123.txt\", function(err){});\t//result => /test123.txt \r\nftp.download(\"/test.txt\", \"/\", function(err){});\t\t//result => /test.txt \r\nftp.download(\"/directory\", \"/\", function(err){});\t\t//result => /directory \r\n\r\n//Array - Object({local:'localPath', remote:'remotePath'})\r\nvar arr = [{remote:\"/test.txt\", local:\"/test.txt\"}, {remote:\"/test1.txt\", local:\"/abcd/test2.txt\"}, {remote:\"/directory\", local:\"/\"}];\r\nftp.download(arr, function(err){});\t// 2 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - String\r\nvar arr = [\"/test.txt\", \"/abcd/test2.txt\", \"/directory\"];\r\nftp.download(arr, \"/\", function(err){});\t// 3 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - Object and String\r\nvar arr = [{remote:\"/test.txt\", local:\"/directory/test.txt\"}, \"/abcd/test2.txt\", \"/directory\"];\r\nftp.download(arr, \"/\", function(err){});\t// 3 arguments;\r\n/* result\r\n/directory/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n\r\n\r\n//접속 종료(disconnect)\r\nftp.close();\t\r\n```\r\n\r\n\r\n\r\nAPI\r\n===========\r\nMethods\r\n-------\r\n* **connect**(< _object_ >config) \r\n\r\n    * host - _string_\t- server domain or ip **Default:** '127.0.0.1'\r\n    * port - _number_\t- port (default : 21)\r\n    * username - _string_ - username for authentication.\r\n    * password - _string_\t- password for authentication.\r\n\r\n\r\n* **cd**(< _string_ >path, < _function_ >callback) - Changes the working directory. callback has 1 parameter: < Error >err.\r\n\r\n* **rm**(< _string_ >path, < _function_ >callback) - Deletes a file or directory(include child files) path on the server. callback has 1 parameter: < Error >err.\r\n    \r\n* **mkdir**(< _string_ >path, < _function_ >callback) - Creates a new directory recursive. callback has 1 parameter: < Error >err.\r\n\r\n* **mv**(< _string_ >oldPath, < _string_ >newPath, < _function_ >callback) - Renames or Move oldPath to newPath on the server. callback has 2 parameter: < Error >err, < String >newPath.\r\n\r\n* **ls**(< _string_ >path, < _function_ >callback) - Retrieves the directory listing of path. callback has 2 parameter: < Error >err, < Array >list.\r\n    \r\n    * name - _string_ - file name\r\n    * size - _number_ - file size\r\n    * type - _string_ - file type. 'd' => directory,  'f' => file\r\n    * date - _date_ - file last modified date\r\n\r\n\r\n* **pwd**(< _function_ >callback) - Retrieves the current working directory. callback has 2 parameters: < Error >err, < string >cwd.\r\n\r\n* **exist**(< _function_ >callback) - whether a file or direcotry exists. callback has 1 parameters: < boolean >exist.\r\n\r\n* **upload**(< _mixed_ >localPath, < _string_ >remotePath, < _function_ >callback) - Sends data to the server to be stored as remotePath. If direcotry path, include self directory and child files. If you want only child files, localPath is \"/directory/**\". callback has 1 parameter: < Error >err. \r\n    \r\n    * file\t\t- ex) upload(\"/test.txt\", \"/a/b/test.txt\", ...)\t=>  result : /a/b/test.txt\r\n    * directory\t\t- ex) upload(\"/directory\", \"/a/b\", ...)\t\t=>  result : /a/b/directory\r\n    * only child files\t- ex) upload(\"/directory/**\", \"/a/b\", ...)\t=>  result : /a/b/child files...\r\n    * array\t- ex) upload([\"/directory/**\", \"/test.txt\"], \"/a/b\", ...)\t=>  result : \"/a/b/test.txt\" and \"/a/b/child files...\"\r\n\r\n\r\n* **download**(< _mixed_ >remotePath, < _string_ >localPath, < _function_ >callback) - Retrieves a file or directory at path from the server. If directory path, include child files. callback has 1 parameter: < Error >err. \r\n\r\n\t* file\t\t- ex) download(\"/test.txt\", \"/a/b/test.txt\", ...)\t=>  result : /a/b/test.txt\r\n    * directory\t\t- ex) download(\"/directory\", \"/a/b\", ...)\t\t=>  result : /a/b/directory\r\n    * only child files\t- ex) download(\"/directory/**\", \"/a/b\", ...)\t=>  result : /a/b/child files...\r\n    * array\t- ex) download([\"/directory/**\", \"/test.txt\"], \"/a/b\", ...)\t=>  result : \"/a/b/test.txt\" and \"/a/b/child files...\"\r\n    \r\n\r\n* **close**() - Closes the connection to the server after any/all enqueued commands have been executed.\r\n\r\n\r\n\r\n\r\nEvent\r\n-------\r\n* **open**(< _FTPClient_ >client) - Emitted when connection and authentication were sucessful.\r\n\r\n* **close** - Emitted when the connection has fully closed.\r\n\r\n* **error**(< _Error_ >err) - Emitted when the connection has fully closed.\r\n\r\n* **upload**(< _string_ >uploadedRemotePath) - Emitted when file or directory uploaded.\r\n\r\n* **download**(< _string_ >downloadedLocalPath) - Emitted when file or directory downloaded.\r\n\r\n\r\n\r\nExamples\r\n===========\r\n```javascript\r\n//Connect\r\nvar FTP = require('ftp-simple');\r\nvar config = {\r\n    host: '',\r\n    port: 21,\r\n    username: '', //or user\r\n    password: ''  //or pass\r\n};\r\nvar ftp = new FTP(config);\r\n\r\n\r\n\r\n\r\n/* \r\nEx) Directory structure\r\n/test/test.txt\r\n/test/child1\r\n/test/child1/image.png\r\n/test/child1/child2\r\n/test/child1/child2/shell.sh\r\n*/\r\n\r\n//Case1. files Upload\r\n//\"/test/test.txt\", \"/test.txt\"   or   \"/test/test.txt\", \"/\"\r\nftp.upload(\"/test/test.txt\", \"/test.txt\", function(err){\r\n\tftp.close();\r\n});\r\n/* result\r\n/test.txt\r\n*/\r\n\r\n\r\n\r\n//Case2. child files Upload\r\n// '/test/**' or '/test/*'\r\nftp.upload(\"/test/**\", \"/\", function(err){\r\n\tftp.close();\r\n});\r\n/* result\r\n/test.txt\r\n/child1\r\n/child1/image.png\r\n/child1/child2\r\n/child1/child2/shell.sh\r\n*/\r\n\r\n\r\n\r\n//Case3. directory Upload\r\nftp.upload(\"/test\", \"/\", function(err){\r\n\tftp.close();\t\r\n});\r\n/* result\r\n/test/test.txt\r\n/test/child1\r\n/test/child1/image.png\r\n/test/child1/child2\r\n/test/child1/child2/shell.sh\r\n*/\r\n\r\n//Case4. Multi file Upload\r\n//Array - Object({local:'localPath', remote:'remotePath'})\r\nvar arr = [{local:\"/test.txt\", remote:\"/test.txt\"}, {local:\"/test1.txt\", remote:\"/abcd/test2.txt\"}, {local:\"/directory\", remote:\"/\"}];\r\nftp.upload(arr, function(err){ftp.close();});\t// 2 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - String\r\nvar arr = [\"/test.txt\", \"/abcd/test2.txt\", \"/directory\"];\r\nftp.upload(arr, \"/\", function(err){ftp.close();});\t// 3 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - Object and String\r\nvar arr = [{local:\"/test.txt\", remote:\"/directory/test.txt\"}, \"/abcd/test2.txt\", \"/directory\"];\r\nftp.upload(arr, \"/\", function(err){ftp.close();});\t// 3 arguments;\r\n/* result\r\n/directory/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n\r\n\r\n//Case5. file download\r\n//\"/test/test.txt\", \"/test.txt\"   or   \"/test/test.txt\", \"/\"\r\nftp.download(\"/test/test.txt\", \"/test.txt\", function(err){\r\n\tftp.close();\t\r\n});\r\n/* result\r\n/test.txt\r\n*/\r\n\r\n\r\n\r\n//Case6. direcotry download\r\nftp.download(\"/test\", \"/\", function(err){\r\n\tftp.close();\t\r\n});\r\n/* result\r\n/test/test.txt\r\n/test/child1\r\n/test/child1/image.png\r\n/test/child1/child2\r\n/test/child1/child2/shell.sh\r\n*/\r\n\r\n\r\n\r\n//Case7. Multi file download\r\n//Array - Object({local:'localPath', remote:'remotePath'})\r\nvar arr = [{remote:\"/test.txt\", local:\"/test.txt\"}, {remote:\"/test1.txt\", local:\"/abcd/test2.txt\"}, {remote:\"/directory\", local:\"/\"}];\r\nftp.download(arr, function(err){ftp.close();});\t// 2 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - String\r\nvar arr = [\"/test.txt\", \"/abcd/test2.txt\", \"/directory\"];\r\nftp.download(arr, \"/\", function(err){ftp.close();});\t// 3 arguments;\r\n/* result\r\n/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n\r\n//Array - Object and String\r\nvar arr = [{remote:\"/test.txt\", local:\"/directory/test.txt\"}, \"/abcd/test2.txt\", \"/directory\"];\r\nftp.download(arr, \"/\", function(err){ftp.close();});\t// 3 arguments;\r\n/* result\r\n/directory/test.txt\r\n/abcd/test2.txt\r\n/directory\r\n*/\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "ftp-simple@0.1.22",
  "_from": "ftp-simple@"
}
