{
  "name": "easy-loop",
  "version": "1.6.0",
  "description": "Easy sync loop processing for Node.js",
  "main": "lib/easy-loop",
  "scripts": {
    "test": "node \"./test/easy-loop-test\""
  },
  "keywords": [
    "serial",
    "loop",
    "forEach",
    "for",
    "while",
    "sync",
    "easy loop",
    "easy for",
    "easy while",
    "sync loop",
    "iteration",
    "step by step",
    "concurrency",
    "async",
    "series",
    "parallel",
    "waterfall"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/humy2833/easy-loop.git"
  },
  "bugs": {
    "url": "https://github.com/humy2833/easy-loop/issues"
  },
  "author": {
    "name": "humy2833",
    "email": "humy2833@gmail.com"
  },
  "license": "MIT",
  "readme": "\r\n\r\n# easy-loop\r\n\t* 쉬운 동기식 반복처리\r\n\t* 선택적 병렬처리\r\n\r\n## iteration function\r\n\t1) Method\r\n\t\t: 모두 같은 동작이며 편리한 메소드를 호출하세요.\r\n\t\t\r\n\t\tvar loop = require('easy-loop');\r\n\t\tloop(arg, arg [, arg, arg]) == loop.for() == loop.while()\t\t\r\n\t\t\r\n\t2) Arguments\t\r\n\t\t(1) Array or Object or function or iteration number\t- require\r\n\t\t(2) process function \t- require\r\n\t\t(3) concurrency\tnumber \t- option (default : 1)\r\n\t\t(4) callback function \t- option (default : nothing)\r\n\t\t\r\n\t\t* TIP : arg2 와 arg3 의 인자값은 순서 변경 가능(arg3 and arg3 can be swap)\r\n\r\n\r\n## series or parallel or waterfall function\r\n\t1) Method\r\n\t\tvar loop = require('easy-loop');\r\n\t\t//series('function array or object' [, concurrency] [, callback]) -> 'concurrency' default 1\r\n\t\tloop.series([\r\n\t\t\tfunction(callback){\r\n\t\t\t\tvar result = \"success\";\r\n\t\t\t\tcallback(null, result);\r\n\t\t\t},\r\n\t\t...], function(err, results){\r\n\t\t\t//err : undefined\r\n\t\t\t//results : [\"success\"...]\r\n\t\t});\r\n\r\n\t\tloop.parallel({\r\n\t\t\tone : function(callback){\r\n\t\t\t\tvar result = \"success\";\r\n\t\t\t\tcallback(null, result);\r\n\t\t\t},\r\n\t\t...}, function(err, results){\r\n\t\t\t//err : undefined\r\n\t\t\t//results : {\"one\":\"success\"...}\r\n\t\t});\r\n\r\n\t\tloop.waterfall([\r\n\t\t\tfunction(callback){\r\n\t\t\t\tvar arg1 = 1;\t\t\t\t\r\n\t\t\t\tcallback(null, arg1);\r\n\t\t\t},\r\n\t\t\tfunction(arg, callback){\r\n\t\t\t\t//console.log(arg) => 1\r\n\t\t\t\tvar arg1 = 2;\t\t\t\t\r\n\t\t\t\tcallback(null, arg, arg1);\r\n\t\t\t},\r\n\t\t\tfunction(arg1, arg2, callback){\r\n\t\t\t\t//console.log(arg1, arg2) => 1, 2\r\n\t\t\t\tvar arg1 = 3;\t\t\t\t\r\n\t\t\t\tcallback(null, arg1);\r\n\t\t\t}], function(err, results){\r\n\t\t\t//err : undefined\r\n\t\t\t//console.log(results) => 3\r\n\t\t});\r\n\r\n\t2) Arguments\r\n\t\t(1) Array or Object (waterfall only Array) - require\r\n\t\t(2) callback function - option\r\n\t\r\n\r\n## Examples\r\n\r\n\tvar loop = require('easy-loop');\r\n\t\r\n\tvar arr = [1,2,3,4,5];\r\n\tconsole.log(\"Case1 Start => Array and 3 arguments\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tloop(arr, function(i, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"=>\", value, \" , Date : \", new Date().getSeconds());\r\n\t\t\tnext();\t//require\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 1 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case1 End => Array\");\r\n\t\r\n\t/* 결과(Result) - 5초 소요(run time : 5 second)\r\n\tCase1 Start => Array and 3 arguments\r\n\tStart : Now Second :  54\r\n\tCase1 End => Array\r\n\t0 '=>' 1 ' , Date : ' 55\r\n\t1 '=>' 2 ' , Date : ' 56\r\n\t2 '=>' 3 ' , Date : ' 57\r\n\t3 '=>' 4 ' , Date : ' 58\r\n\t4 '=>' 5 ' , Date : ' 59\r\n\terr :  undefined\r\n\tCase 1 result\r\n\tResult : Now Second :  59\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar arr = [1,2,3,4,5];\r\n\tconsole.log(\"Case2 Start => Array and 2 arguments\");\r\n\tloop.for(arr, function(i, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"=>\", value);\t\r\n\t\t\tnext();\t\t\r\n\t\t}, 1000);\r\n\t});\r\n\tconsole.log(\"Case2 End => Array and 2 arguments\");\r\n\t\r\n\t/* 결과(Result) - 5초 소요(run time : 5 second)\r\n\tCase2 Start => Array and 2 arguments\r\n\tCase2 End => Array and 2 arguments\r\n\t0 '=>' 1\r\n\t1 '=>' 2\r\n\t2 '=>' 3\r\n\t3 '=>' 4\r\n\t4 '=>' 5\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar arr = [1,2,3,4,5];\r\n\tconsole.log(\"Case3 Start => Array and error(or break) and 3 arguments\");\r\n\tloop(arr, function(i, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"=>\", value);\r\n\t\t\tif(i === 2)\tnext(\"error or break\");\r\n\t\t\telse\t\tnext();\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 3 result\");\r\n\t});\r\n\tconsole.log(\"Case3 End => Array and error(or break)\");\r\n\t\r\n\t/* 결과(Result) - 3초 소요(run time : 3 second)\r\n\tCase3 Start => Array and error(or break) and 3 arguments\r\n\tCase3 End => Array and error(or break)\r\n\t0 '=>' 1\r\n\t1 '=>' 2\r\n\t2 '=>' 3\r\n\terr :  error or break\r\n\tCase 3 result\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar obj = {a:1,b:2,c:3,d:4,e:5};\r\n\tconsole.log(\"Case4 Start => Object and 3 arguments\");\r\n\tloop(obj, function(key, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(key, \"=>\", value);\r\n\t\t\tnext();\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 4 result\");\r\n\t});\r\n\tconsole.log(\"Case4 End => Object\");\r\n\t\r\n\t/* 결과(Result) - 5초 소요(run time : 5 second)\r\n\tCase4 Start => Object and 3 arguments\r\n\tCase4 End => Object\r\n\ta => 1\r\n\tb => 2\r\n\tc => 3\r\n\td => 4\r\n\te => 5\r\n\terr :  undefined\r\n\tCase 4 result\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar arr = [];\t// or {}\r\n\tconsole.log(\"Case5 Start => Empty Array and 3 arguments\");\r\n\tloop(arr, function(i, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"=>\", value);\r\n\t\t\tnext();\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case5 result\");\r\n\t});\r\n\tconsole.log(\"Case5 End => Empty Array\");\r\n\t\r\n\t/* 결과(Result) - 0초 소요(run time : 0 second)\r\n\tCase5 Start => Empty Array and 3 arguments\r\n\terr :  undefined\r\n\tCase5 result\r\n\tCase5 End => Empty Array\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar arr = [1,2,3,4,5];\r\n\tconsole.log(\"Case6 Start => concurrency and 4 arguments\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tloop(arr, function(i, value, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"=>\", value, \" , Date : \", new Date().getSeconds());\r\n\t\t\tnext();\r\n\t\t}, 1000);\r\n\t}, 3, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 6 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case6 End => concurrency\");\r\n\t\r\n\t/*\r\n\t*Tip : arguments(arr, function, concurrency, callback) == arguments(arr, concurrency, function, callback) \r\n\t결과(Result) - 2초 소요(run time : 2 second)\r\n\tCase6 Start => concurrency and 4 arguments\r\n\tStart : Now Second :  3\r\n\tCase6 End => concurrency\r\n\t0 '=>' 1 ' , Date : ' 4\r\n\t1 '=>' 2 ' , Date : ' 4\r\n\t2 '=>' 3 ' , Date : ' 4\r\n\t3 '=>' 4 ' , Date : ' 5\r\n\t4 '=>' 5 ' , Date : ' 5\r\n\terr :  undefined\r\n\tCase 6 result\r\n\tResult : Now Second :  5\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar num = 0;\r\n\tconsole.log(\"Case7 Start => while and 3 arguments\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tloop.while(function(){\r\n\t\treturn num < 5;\r\n\t}, function(next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(\"Date : \", new Date().getSeconds());\r\n\t\t\tnum++;\r\n\t\t\tnext();\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 7 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case7 End\");\r\n\t\r\n\t/*\r\n\t결과(Result) - 5초 소요(run time : 5 second)\r\n\tCase7 Start => while and 3 arguments\r\n\tStart : Now Second :  20\r\n\tCase7 End\r\n\tDate :  21\r\n\tDate :  22\r\n\tDate :  23\r\n\tDate :  24\r\n\tDate :  25\r\n\terr :  undefined\r\n\tCase 7 result\r\n\tResult : Now Second :  25\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tvar num = 0;\r\n\tconsole.log(\"Case8 Start => while and 3 arguments and break(or error)\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tloop.while(function(){\r\n\t\treturn num < 5;\r\n\t}, function(next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(\"Date : \", new Date().getSeconds());\r\n\t\t\tnum++;\r\n\t\t\tnext(num === 1 ? true : false);\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 8 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case8 End\");\r\n\t\r\n\t/*\r\n\tCase8 Start => while and 3 arguments and break(or error)\r\n\tStart : Now Second :  21\r\n\tCase8 End\r\n\tDate :  22\r\n\terr :  true\r\n\tCase 8 result\r\n\tResult : Now Second :  22\r\n\t*/\r\n\r\n\r\n\r\n\tconsole.log(\"Case9 Start => When only know the number of iterations. 2 arguments or 3 arguments(concurrency) and break possible\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar loopCount = 5;\r\n\tloop(loopCount, function(i, next){\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(i, \"Date : \", new Date().getSeconds());\r\n\t\t\tnext();\t// break => next(err);\r\n\t\t}, 1000);\r\n\t}, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 9 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case9 End\");\r\n\r\n\t/*\r\n\tCase9 Start => When only know the number of iterations. 2 arguments or 3 arguments(concurrency) and break possible\r\n\tStart : Now Second :  23\r\n\tCase9 End\r\n\t0 'Date : ' 24\r\n\t1 'Date : ' 25\r\n\t2 'Date : ' 26\r\n\t3 'Date : ' 27\r\n\t4 'Date : ' 28\r\n\terr :  undefined\r\n\tCase 9 result\r\n\tResult : Now Second :  28\r\n\t*/\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case10 Start => When only know the number of iterations. break possible\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar handle = loop.create(10, function(err){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"Case 10 result\");\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tfor(var i=0; i<10; i++)\r\n\t{\r\n\t\tsetTimeout(function(){\r\n\t\t\tconsole.log(\"Date : \", new Date().getSeconds());\r\n\t\t\thandle.next();\t// break => handle.next(err);\r\n\t\t}, 1000);\r\n\t}\r\n\tconsole.log(\"Case10 End\");\r\n\r\n\t/*\r\n\tCase10 Start => When only know the number of iterations\r\n\tStart : Now Second :  20\r\n\tCase10 End\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\tDate :  21\r\n\terr :  undefined\r\n\tCase 10 result\r\n\tResult : Now Second :  21\r\n\t*/\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case11 Start => Array. Like as 'async.series' of async module. If the error is when to stop.\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar arr = [\r\n\t\tfunction(callback){\r\n\t\t\tconsole.log(\"start series\");\r\n\t\t\tcallback();\r\n\t\t},\r\n\t\tfunction(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(100);\r\n\t\t\t\tcallback(null, 100);\r\n\t\t\t}, 1000);\r\n\t\t}, function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(200);\r\n\t\t\t\tcallback(null, 200);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t];\r\n\tloop.series(arr, function(err, results){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"results : \", JSON.stringify(results));\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case11 End\");\r\n\r\n\t/*\r\n\tCase11 Start => Array. Like as 'async.series' of async module. If the error is when to stop.\r\n\tStart : Now Second :  50\r\n\tstart series\r\n\tCase11 End\r\n\t100\r\n\t200\r\n\terr :  undefined\r\n\tresults :  [null,100,200]\r\n\tResult : Now Second :  52\r\n\t*/\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case12 Start => Object. Like as 'async.series' of async module. If the error is when to stop.\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar obj = {\r\n\t\tone :\tfunction(callback){\r\n\t\t\tconsole.log(\"start series\");\r\n\t\t\tcallback();\r\n\t\t},\r\n\t\ttwo : function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(100);\r\n\t\t\t\tcallback(null, 100);\r\n\t\t\t}, 1000);\r\n\t\t}, \r\n\t\tthree : function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(200);\r\n\t\t\t\tcallback(null, 200);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t};\r\n\tloop.series(obj, function(err, results){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"results : \", JSON.stringify(results));\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case12 End\");\r\n\r\n\t/*\r\n\tCase12 Start => Object. Like as 'async.series' of async module. If the error is when to stop.\r\n\tStart : Now Second :  38\r\n\tstart series\r\n\tCase12 End\r\n\t100\r\n\t200\r\n\terr :  undefined\r\n\tresults :  {\"one\":null,\"two\":100,\"three\":200}\r\n\tResult : Now Second :  40\r\n\t*/\r\n\t\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case13 Start => Array. Like as 'async.parallel' of async module. If the error is when to stop.\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar arr = [\r\n\t\tfunction(callback){\r\n\t\t\tconsole.log(\"start parallel\");\r\n\t\t\tcallback();\r\n\t\t},\r\n\t\tfunction(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(100);\r\n\t\t\t\tcallback(null, 100);\r\n\t\t\t}, 500);\r\n\t\t}, function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(200);\r\n\t\t\t\tcallback(null, 200);\r\n\t\t\t}, 500);\r\n\t\t}\r\n\t];\r\n\tloop.parallel(arr, function(err, results){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"results : \", JSON.stringify(results));\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case13 End\");\r\n\r\n\t/*\r\n\tCase13 Start => Array. Like as 'async.parallel' of async module. If the error is when to stop.\r\n\tStart : Now Second :  55\r\n\tstart parallel\r\n\tCase13 End\r\n\t100\r\n\t200\r\n\terr :  undefined\r\n\tresults :  [null,100,200]\r\n\tResult : Now Second :  55\r\n\t*/\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case14 Start => Object. Like as 'async.parallel' of async module. If the error is when to stop.\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar obj = {\r\n\t\tone :\tfunction(callback){\r\n\t\t\tconsole.log(\"start parallel\");\r\n\t\t\tcallback();\r\n\t\t},\r\n\t\ttwo : function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(100);\r\n\t\t\t\tcallback(null, 100);\r\n\t\t\t}, 500);\r\n\t\t}, \r\n\t\tthree : function(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(200);\r\n\t\t\t\tcallback(null, 200);\r\n\t\t\t}, 500);\r\n\t\t}\r\n\t};\r\n\tloop.parallel(obj, function(err, results){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"results : \", JSON.stringify(results));\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case14 End\");\r\n\r\n\t/*\r\n\tCase14 Start => Object. Like as 'async.parallel' of async module. If the error is when to stop.\r\n\tStart : Now Second :  59\r\n\tstart parallel\r\n\tCase14 End\r\n\t100\r\n\t200\r\n\terr :  undefined\r\n\tresults :  {\"one\":null,\"two\":100,\"three\":200}\r\n\tResult : Now Second :  59\r\n\t*/\r\n\r\n\r\n\r\n\r\n\tconsole.log(\"Case15 Start => Array(or Object). Like as 'async.series'. But sub functions run parallel.\");\r\n\tconsole.log(\"Start : Now Second : \", new Date().getSeconds());\r\n\tvar obj = [\r\n\t\t[\r\n\t\t\tfunction(cb){\r\n\t\t\t\tsetTimeout(function(){console.log(new Date().getSeconds(), \"sub1\");\r\n\t\t\t\tcb(null, \"sub1\");}, 1000)\r\n\t\t}, \r\n\t\t\tfunction(cb){\r\n\t\t\t\tsetTimeout(function(){console.log(new Date().getSeconds(), \"sub2\");\r\n\t\t\t\tcb(null, \"sub2\");}, 1000)\r\n\t\t\t}\r\n\t\t],\r\n\t\tfunction(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(new Date().getSeconds(), 100);\r\n\t\t\t\tcallback(null, 100);\r\n\t\t\t}, 1000);\r\n\t\t}, \r\n\t\tfunction(callback){\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tconsole.log(new Date().getSeconds(), 200);\r\n\t\t\t\tcallback(null, 200);\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t];\r\n\tloop.series(obj, function(err, results){\r\n\t\tconsole.log(\"err : \", err);\r\n\t\tconsole.log(\"results : \", JSON.stringify(results));\r\n\t\tconsole.log(\"Result : Now Second : \", new Date().getSeconds());\r\n\t});\r\n\tconsole.log(\"Case15 End\");\r\n\r\n\t/*\r\n\tCase15 Start => Array(or Object). Like as 'async.series'. But sub functions run\r\n\tparallel.\r\n\tStart : Now Second :  59\r\n\tCase15 End\r\n\t0 'sub1'\r\n\t0 'sub2'\r\n\t1 100\r\n\t2 200\r\n\terr :  undefined\r\n\tresults :  [[\"sub1\",\"sub2\"],100,200]\r\n\tResult : Now Second :  2\r\n\t*/",
  "readmeFilename": "README.md",
  "_id": "easy-loop@1.6.0",
  "dist": {
    "shasum": "9ccc8c6e4b9280e75cd99dbbc33739a72cef4d59"
  },
  "_from": "easy-loop@^1.6.0",
  "_resolved": "https://registry.npmjs.org/easy-loop/-/easy-loop-1.6.0.tgz"
}
